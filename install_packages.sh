#!/bin/bash

# --- Script Configuration ---
# Set strict mode to catch errors early
set -o errexit
set -o nounset
set -o pipefail

# --- Script Variables ---
SCRIPT_NAME=$(basename "$0")
AIR_GAPPED_MODE=0
SAVE_MODE=0
ONLINE_MODE=0
base_dir=$(pwd)
PACKAGES_LIST=()
mode_msg=""
os_id=""


usage() {
    cat << EOF
Usage: $SCRIPT_NAME [offline] [save] [online] [package1 package2 package3 ...]

This script must be run with root privileges.
At least one parameter is required followed by a list of packages to install. [save] and [online] may be used together followed by the package(s) list. [offline] must be used alone followed by the package(s) list.

Parameters:
  offline         : Installs packages from an offline tarball that was generated by this script. 
                    Tarball must be placed in the same directory as this script. Offline host must be running the same OS type and version.
  save            : Downloads and saves packages and dependencies as an offline install tarball.
  online          : Install packages and dependenciesfrom the internet using default package manager repositories.
  [package(s)...] : A space separated list of package names to process.

Example:
  Only install the packages:          
  sudo ./$SCRIPT_NAME online python3 python3-pip

  Only save the packages:
  sudo ./$SCRIPT_NAME save python3 python3-pip

  Save and install the packages:
  sudo ./$SCRIPT_NAME save online python3 python3-pip

  Install packages from an offline tarball:
  sudo ./$SCRIPT_NAME offline python3 python3-pip
EOF
    exit 1
}

os_type() {
    # Get OS information from /etc/os-release
    if [[ -f /etc/os-release ]]; then
        # shellcheck disable=SC1091
        source /etc/os-release
        os_id="$ID"
    else
        echo "Unknown or unsupported OS $os_id."
        exit 1
    fi
}

validate_runtime() {

  # Determine mode and packages
  if [[ $AIR_GAPPED_MODE -eq 1 ]]; then
    if [[ $SAVE_MODE -eq 1 ]]; then
      echo "Error: 'offline' and 'save' modes cannot be used together."
      usage
    fi
    if [[ $ONLINE_MODE -eq 1 ]]; then
      echo "Error: 'offline' and 'online' modes cannot be used together."
      usage
    fi
    if [[ -f "$base_dir/offline-packages.tar.gz" ]]; then
      echo "Extracting tarball..."
      tar -xzf "$base_dir/offline-packages.tar.gz" -C "$base_dir"
    else
      echo "Tarball not found. Please place it in the same directory as this script."
      exit 1
    fi
  fi
  if [[ $AIR_GAPPED_MODE -eq 0 ]]; then
    if [[ $ONLINE_MODE -eq 0 ]] && [[ $SAVE_MODE -eq 0 ]]; then
      echo "Error: One of 'offline', 'save', or 'online' modes must be specified."
      usage
    fi
  fi
  if [[ ${#PACKAGES_LIST[@]} -eq 0 ]]; then
      echo "Error: No packages specified."
      usage
  fi
}

install_packages() {
  local_repo_dir="$base_dir/offline-packages"
  case "$os_id" in
    ubuntu|debian)
      if [[ $AIR_GAPPED_MODE -eq 1 ]]; then
        source_dir="/etc/apt/sources.list.d/"
        if [ -d "$source_dir" ]; then
            for file in "$source_dir"/*; do
                [ -e "$file" ] && mv "$file" "${file}.bak"
            done
            [ -e "/etc/apt/sources.list" ] && mv /etc/apt/sources.list /etc/apt/sources.list.bak
        else
            echo "Sources.list directory not found. Skipping backup."
        fi
        echo "deb [trusted=yes] file:$local_repo_dir ./" | tee -a /etc/apt/sources.list.d/offline-packages.list &> /dev/null
        apt-get update -qq && echo "" | DEBIAN_FRONTEND=noninteractive apt-get install -y -qq "${PACKAGES_LIST[@]}" &> /dev/null
        if [[ $? -ne 0 ]]; then
            echo "Error: apt-get install failed." >&2
            return 1
        fi
        rm -f /etc/apt/sources.list.d/offline-packages.list
        if [ -d "$source_dir" ]; then
            for file in "$source_dir"/*.bak; do
                [ -e "$file" ] && mv "$file" "${file%.bak}"
            done
            [ -e "/etc/apt/sources.list.bak" ] && mv /etc/apt/sources.list.bak /etc/apt/sources.list
        else
            echo "Sources.list directory not found. Skipping restore."
        fi
      elif [[ $ONLINE_MODE -eq 1 ]]; then
        apt-get update -qq && echo "" | DEBIAN_FRONTEND=noninteractive apt-get install -y -qq "${PACKAGES_LIST[@]}" &> /dev/null
        if [[ $? -ne 0 ]]; then
            echo "Error: apt-get install failed." >&2
            return 1
        fi
      else
        echo "Installation method not specified."
        exit 1
      fi
      ;;
    rhel|centos|rocky|almalinux|fedora)
      if [[ $AIR_GAPPED_MODE -eq 1 ]]; then
        echo "Backing up repositories and creating local..."
        cat <<EOF | tee /etc/yum.repos.d/offline-packages.repo
[offline-packages-repo]
name=Offline Packages Repository
baseurl=file://$local_repo_dir
enabled=1
gpgcheck=0
EOF
        if command -v dnf &> /dev/null; then
            dnf clean all
            dnf --disablerepo="*" --enablerepo="offline-packages-repo" install -y "${PACKAGES_LIST[@]}"
        elif command -f yum &> /dev/null; then
            yum clean all
            yum --disablerepo="*" --enablerepo="offline-packages-repo" install -y "${PACKAGES_LIST[@]}"
        else
            echo "Repository directory not found. Skipping backup."
        fi
        rm -f /etc/yum.repos.d/offline-packages.repo
        echo "Package install finished"
      elif [[ $ONLINE_MODE -eq 1 ]]; then
        if command -v dnf &> /dev/null; then
            dnf clean all
            dnf install -y "${PACKAGES_LIST[@]}"
        elif command -f yum &> /dev/null; then
            yum clean all
            yum install -y "${PACKAGES_LIST[@]}"
        fi
        echo "Package install finished"
      else
        echo "Installation method not specified."
        exit 1
      fi
      ;;
    sles|opensuse-leap)
      if [[ $AIR_GAPPED_MODE -eq 1 ]]; then
        # offline install for SLES based
        echo "Backing up repositories and creating local..."
        zypper repos --export /tmp/repos.bak
        zypper removerepo --all
        zypper addrepo "file://$local_repo_dir" "offline-packages-repo"
        zypper refresh
        zypper --no-refresh install -y "${PACKAGES_LIST[@]}"
        echo "Restoring repositories..."
        zypper removerepo offline-packages-repo
        zypper repos --import /tmp/repos.bak
        rm -f /tmp/repos.bak
        echo "Package install finished"
      elif [[ $ONLINE_MODE -eq 1 ]]; then
        zypper refresh
        zypper install -y "${PACKAGES_LIST[@]}"
        echo "Package install finished"
      else
        echo "Installation method not specified."
        exit 1
      fi
      ;;
    *)
      echo "Error: Unsupported OS '$os_id'. Manual install of packages required."
      exit 1
      ;;
  esac

}

save_packages() {
  DOWNLOAD_DIR="$base_dir/offline-packages"
  mkdir -p "$DOWNLOAD_DIR"
  case "$os_id" in
    ubuntu|debian)
      echo "installing dpkg-dev..."
      echo "" | DEBIAN_FRONTEND=noninteractive apt-get -y -qq install dpkg-dev &> /dev/null
      cd "$DOWNLOAD_DIR"
      apt-get update -qq
      local packages_to_download=$(apt-cache depends --recurse --no-recommends --no-suggests --no-conflicts --no-breaks --no-replaces --no-enhances --no-pre-depends "${PACKAGES_LIST[@]}" | grep "^\w")
      if [[ -z "$packages_to_download" ]]; then
          echo "Error: Failed to resolve dependencies for packages. Aborting." >&2
          cd "$base_dir"
          return 1
      fi
      apt-get download $packages_to_download &> /dev/null
      if [[ $? -ne 0 ]]; then
          echo "Error: apt-get download failed." >&2
          cd "$base_dir"
          return 1
      fi
      dpkg-scanpackages -m . > Packages
      cd "$base_dir"
      ;;
    rhel|centos|rocky|almalinux|fedora)
      dnf install -y dnf-utils createrepo_c
      dnf download --resolve --downloaddir="$DOWNLOAD_DIR" "${PACKAGES_LIST[@]}"
      createrepo_c "$DOWNLOAD_DIR"
      ;;
    sles|opensuse-leap)
      zypper install -y createrepo_c
      rm -rf /var/cache/zypp/packages/*
      zypper refresh
      zypper install --download-only "${PACKAGES_LIST[@]}"
      find /var/cache/zypp/packages/ -name "*.rpm" -exec sudo cp {} "$DOWNLOAD_DIR" \;
      createrepo_c "$DOWNLOAD_DIR"
      ;;
    *)
      echo "Error: Unsupported OS '$os_id'. Manual download of packages may be required for air-gapped mode." >&2
      rm -rf "$base_dir/offline-packages"
      return 1
      ;;
  esac
  tar -czf "$base_dir/offline-packages.tar.gz" -C "$base_dir" "offline-packages"
  rm -rf "$base_dir/offline-packages"
}

# --- Main Script --- #

# Check for root or sudo
if [[ $EUID -ne 0 ]]; then
    echo "Error: This script must be run with sudo or as root."
    usage
fi

# Verify Operating System
os_type

# Parse command-line arguments
while [[ $# -gt 0 ]]; do
    case "$1" in
        -h|--help)
            usage
            ;;
        offline)
            AIR_GAPPED_MODE=1
            shift
            ;;
        save)
            SAVE_MODE=1
            shift
            ;;
        online)
            ONLINE_MODE=1
            shift
            ;;
        *)
            PACKAGES_LIST+=("$1")
            shift
            ;;
    esac
done

# Validate Execution
validate_runtime

# Display script settings
echo "### --- Package Installer Started at $(date) --- ###"
echo "  AIR_GAPPED_MODE: $AIR_GAPPED_MODE"
echo "  SAVE_MODE: $SAVE_MODE"
echo "  ONLINE_MODE: $ONLINE_MODE"
echo "  PACKAGES_LIST: ${PACKAGES_LIST[@]}"
echo "  OS: $ID"

if [[ $AIR_GAPPED_MODE -eq 1 ]] || [[ $ONLINE_MODE -eq 1 ]]; then
  echo "Installing [ ${PACKAGES_LIST[@]} ] on $os_id..."
  install_packages
  echo "Finished installing ${PACKAGES_LIST[@]} on $os_id"
fi
if [[ $SAVE_MODE -eq 1 ]]; then
  echo "Saving [ ${PACKAGES_LIST[@]} ] on $os_id..."
  save_packages
  echo "Copy $base_dir/offline-packages.tar.gz and $SCRIPT_NAME to air-gapped host and run:"
  echo "    'sudo ./$SCRIPT_NAME offline ${PACKAGES_LIST[@]}'"
fi
echo "### --- Package Installer Ended at $(date) --- ###"

# --- End Main Script --- #